clear;clc;close all;

s = 0.25; 

f = @(x) x.*(1-x);
al = 2;
g = [1/3;1;1];
% mixed boundary 
% u'(x) = 1/(3\delta) in [-\delta, -\delta/2) , u(x) = 0 in [-\delta/2,0],
% u (x) = 1 in [1,1+\delta].



del = [0.16,0.08,0.04,0.02,0.01,0.005];
% del = [0.02,0.01,0.005,0.0025];
% del = del/2;

kerfun = @kernel;
figure;
hold on 
u = load('sol_local').u;


% scalling
auxfunc = @(x) kerfun(x,s,1).*x.^2;
aux = quadgk(@(x) auxfunc(x),0,1) *2;
Scale = 2/aux;

%Collocation
M = 2000;
h = 1/M;
% del = h *[10;5];
plot(h*(1:M-1),u(h*(1:M-1)),'LineWidth',1.8,'LineStyle','-','Marker','o','MarkerIndices',1:100:M,'DisplayName','local')

U_gen = u(h*(1:M-1));
for k = 1:length(del)
    
    delta = del(k);
    row = Stiff_nonlocal_collocation(delta,h, s, kerfun);
    
    r = round(delta/h+0.000001);
    nn_all = r+M+1+r;
    S = zeros(nn_all,nn_all);
    for i = 1:nn_all
        for j = 1:numel(row)
            if i+j-1>nn_all 
                S(i,i) = S(i,i)+row(j);
            else 
            S(i,i+j-1) = S(i,i+j-1)+row(j);
            end
        end
    end
    for i = 1:nn_all
        for j = 2:numel(row)
            if i-j+1 < 1 
                S(i,i) = S(i,i)+row(j);
            else 
            S(i,i-j+1) = S(i,i-j+1)+row(j);
            end
        end
    end
    S = Scale*S;
    Stiff = Scale*S;
    % Firstly deal with -\delta,\delta/2
    r1 = floor((r+1)/2);
    r2 = r+1-r1;
    S(1:r+1,1:r+1) = 0;
    for i = 1:r1
        S(i,i) = -sum(S(i,:));
    end
    for i = r1+1:r+1
        S(i,:) = 0;
        S(i,i) = 1;
    end
    for i = nn_all-r:nn_all
        S(i,:) = 0;
        S(i,i) = 1;
    end
    
    
    G1 = -g(1)/delta*ones(r1,1);
    G2 = g(2) * ones(r2,1); 
    FF = f(h*(0:M)');
    G3 = +g(3) * ones(r+1,1);
    F=[G1;G2(1:end-1);G2(end)+FF(1);FF(2:end-1);FF(end)+G3(1);G3(2:r+1)];
    U = S(2:end-1,2:end-1)\F(2:end-1);
    
    plot(h*(1:M-1),U(r+(1:M-1)'),'LineWidth',1.8,'LineStyle','-','DisplayName',['\delta=' num2str(delta)]); 

    legend('location','southeast')
    err_vec = U(r+(1:M-1)')-U_gen;
    err(k) = norm(err_vec);
end
% vpa(err,4)
% Checkratio(err,del(end:-1:1))
% sum(Checkratio(err,del(end:-1:1)))/(numel(del)-1)